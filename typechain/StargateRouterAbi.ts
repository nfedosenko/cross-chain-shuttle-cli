/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Pool {
  export type CreditObjStruct = {
    credits: PromiseOrValue<BigNumberish>;
    idealBalance: PromiseOrValue<BigNumberish>;
  };

  export type CreditObjStructOutput = [BigNumber, BigNumber] & {
    credits: BigNumber;
    idealBalance: BigNumber;
  };

  export type SwapObjStruct = {
    amount: PromiseOrValue<BigNumberish>;
    eqFee: PromiseOrValue<BigNumberish>;
    eqReward: PromiseOrValue<BigNumberish>;
    lpFee: PromiseOrValue<BigNumberish>;
    protocolFee: PromiseOrValue<BigNumberish>;
    lkbRemove: PromiseOrValue<BigNumberish>;
  };

  export type SwapObjStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    amount: BigNumber;
    eqFee: BigNumber;
    eqReward: BigNumber;
    lpFee: BigNumber;
    protocolFee: BigNumber;
    lkbRemove: BigNumber;
  };
}

export declare namespace IStargateRouter {
  export type LzTxObjStruct = {
    dstGasForCall: PromiseOrValue<BigNumberish>;
    dstNativeAmount: PromiseOrValue<BigNumberish>;
    dstNativeAddr: PromiseOrValue<BytesLike>;
  };

  export type LzTxObjStructOutput = [BigNumber, BigNumber, string] & {
    dstGasForCall: BigNumber;
    dstNativeAmount: BigNumber;
    dstNativeAddr: string;
  };
}

export interface StargateRouterAbiInterface extends utils.Interface {
  functions: {
    "activateChainPath(uint256,uint16,uint256)": FunctionFragment;
    "addLiquidity(uint256,uint256,address)": FunctionFragment;
    "bridge()": FunctionFragment;
    "cachedSwapLookup(uint16,bytes,uint256)": FunctionFragment;
    "callDelta(uint256,bool)": FunctionFragment;
    "clearCachedSwap(uint16,bytes,uint256)": FunctionFragment;
    "createChainPath(uint256,uint16,uint256,uint256)": FunctionFragment;
    "createPool(uint256,address,uint8,uint8,string,string)": FunctionFragment;
    "creditChainPath(uint16,uint256,uint256,(uint256,uint256))": FunctionFragment;
    "factory()": FunctionFragment;
    "instantRedeemLocal(uint16,uint256,address)": FunctionFragment;
    "mintFeeOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "protocolFeeOwner()": FunctionFragment;
    "quoteLayerZeroFee(uint16,uint8,bytes,bytes,(uint256,uint256,bytes))": FunctionFragment;
    "redeemLocal(uint16,uint256,uint256,address,uint256,bytes,(uint256,uint256,bytes))": FunctionFragment;
    "redeemLocalCallback(uint16,bytes,uint256,uint256,uint256,address,uint256,uint256)": FunctionFragment;
    "redeemLocalCheckOnRemote(uint16,bytes,uint256,uint256,uint256,uint256,bytes)": FunctionFragment;
    "redeemRemote(uint16,uint256,uint256,address,uint256,uint256,bytes,(uint256,uint256,bytes))": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "retryRevert(uint16,bytes,uint256)": FunctionFragment;
    "revertLookup(uint16,bytes,uint256)": FunctionFragment;
    "revertRedeemLocal(uint16,bytes,uint256,address,(uint256,uint256,bytes))": FunctionFragment;
    "sendCredits(uint16,uint256,uint256,address)": FunctionFragment;
    "setBridgeAndFactory(address,address)": FunctionFragment;
    "setDeltaParam(uint256,bool,uint256,uint256,bool,bool)": FunctionFragment;
    "setFeeLibrary(uint256,address)": FunctionFragment;
    "setFees(uint256,uint256)": FunctionFragment;
    "setMintFeeOwner(address)": FunctionFragment;
    "setProtocolFeeOwner(address)": FunctionFragment;
    "setSwapStop(uint256,bool)": FunctionFragment;
    "setWeightForChainPath(uint256,uint16,uint256,uint16)": FunctionFragment;
    "swap(uint16,uint256,uint256,address,uint256,uint256,(uint256,uint256,bytes),bytes,bytes)": FunctionFragment;
    "swapRemote(uint16,bytes,uint256,uint256,uint256,uint256,address,(uint256,uint256,uint256,uint256,uint256,uint256),bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawMintFee(uint256,address)": FunctionFragment;
    "withdrawProtocolFee(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activateChainPath"
      | "addLiquidity"
      | "bridge"
      | "cachedSwapLookup"
      | "callDelta"
      | "clearCachedSwap"
      | "createChainPath"
      | "createPool"
      | "creditChainPath"
      | "factory"
      | "instantRedeemLocal"
      | "mintFeeOwner"
      | "owner"
      | "protocolFeeOwner"
      | "quoteLayerZeroFee"
      | "redeemLocal"
      | "redeemLocalCallback"
      | "redeemLocalCheckOnRemote"
      | "redeemRemote"
      | "renounceOwnership"
      | "retryRevert"
      | "revertLookup"
      | "revertRedeemLocal"
      | "sendCredits"
      | "setBridgeAndFactory"
      | "setDeltaParam"
      | "setFeeLibrary"
      | "setFees"
      | "setMintFeeOwner"
      | "setProtocolFeeOwner"
      | "setSwapStop"
      | "setWeightForChainPath"
      | "swap"
      | "swapRemote"
      | "transferOwnership"
      | "withdrawMintFee"
      | "withdrawProtocolFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activateChainPath",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "bridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cachedSwapLookup",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "callDelta",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "clearCachedSwap",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createChainPath",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "creditChainPath",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      Pool.CreditObjStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "instantRedeemLocal",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintFeeOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolFeeOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteLayerZeroFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      IStargateRouter.LzTxObjStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemLocal",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      IStargateRouter.LzTxObjStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemLocalCallback",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemLocalCheckOnRemote",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemRemote",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      IStargateRouter.LzTxObjStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retryRevert",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revertLookup",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revertRedeemLocal",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      IStargateRouter.LzTxObjStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendCredits",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBridgeAndFactory",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDeltaParam",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeLibrary",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintFeeOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapStop",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWeightForChainPath",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      IStargateRouter.LzTxObjStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapRemote",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      Pool.SwapObjStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMintFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawProtocolFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "activateChainPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cachedSwapLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "callDelta", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clearCachedSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createChainPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "creditChainPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "instantRedeemLocal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintFeeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteLayerZeroFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemLocal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemLocalCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemLocalCheckOnRemote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemRemote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retryRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertRedeemLocal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBridgeAndFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDeltaParam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeLibrary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMintFeeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapStop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWeightForChainPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapRemote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMintFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProtocolFee",
    data: BytesLike
  ): Result;

  events: {
    "CachedSwapSaved(uint16,bytes,uint256,address,uint256,address,bytes,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RedeemLocalCallback(uint16,bytes,uint256,uint256,uint256,address,uint256,uint256)": EventFragment;
    "Revert(uint8,uint16,bytes,uint256)": EventFragment;
    "RevertRedeemLocal(uint16,uint256,uint256,bytes,uint256,uint256,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CachedSwapSaved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemLocalCallback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revert"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevertRedeemLocal"): EventFragment;
}

export interface CachedSwapSavedEventObject {
  chainId: number;
  srcAddress: string;
  nonce: BigNumber;
  token: string;
  amountLD: BigNumber;
  to: string;
  payload: string;
  reason: string;
}
export type CachedSwapSavedEvent = TypedEvent<
  [number, string, BigNumber, string, BigNumber, string, string, string],
  CachedSwapSavedEventObject
>;

export type CachedSwapSavedEventFilter = TypedEventFilter<CachedSwapSavedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RedeemLocalCallbackEventObject {
  srcChainId: number;
  srcAddress: string;
  nonce: BigNumber;
  srcPoolId: BigNumber;
  dstPoolId: BigNumber;
  to: string;
  amountSD: BigNumber;
  mintAmountSD: BigNumber;
}
export type RedeemLocalCallbackEvent = TypedEvent<
  [
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ],
  RedeemLocalCallbackEventObject
>;

export type RedeemLocalCallbackEventFilter =
  TypedEventFilter<RedeemLocalCallbackEvent>;

export interface RevertEventObject {
  bridgeFunctionType: number;
  chainId: number;
  srcAddress: string;
  nonce: BigNumber;
}
export type RevertEvent = TypedEvent<
  [number, number, string, BigNumber],
  RevertEventObject
>;

export type RevertEventFilter = TypedEventFilter<RevertEvent>;

export interface RevertRedeemLocalEventObject {
  srcChainId: number;
  _srcPoolId: BigNumber;
  _dstPoolId: BigNumber;
  to: string;
  redeemAmountSD: BigNumber;
  mintAmountSD: BigNumber;
  nonce: BigNumber;
  srcAddress: string;
}
export type RevertRedeemLocalEvent = TypedEvent<
  [
    number,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ],
  RevertRedeemLocalEventObject
>;

export type RevertRedeemLocalEventFilter =
  TypedEventFilter<RevertRedeemLocalEvent>;

export interface StargateRouterAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StargateRouterAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activateChainPath(
      _poolId: PromiseOrValue<BigNumberish>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addLiquidity(
      _poolId: PromiseOrValue<BigNumberish>,
      _amountLD: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bridge(overrides?: CallOverrides): Promise<[string]>;

    cachedSwapLookup(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, string] & {
        token: string;
        amountLD: BigNumber;
        to: string;
        payload: string;
      }
    >;

    callDelta(
      _poolId: PromiseOrValue<BigNumberish>,
      _fullMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    clearCachedSwap(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createChainPath(
      _poolId: PromiseOrValue<BigNumberish>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPool(
      _poolId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _sharedDecimals: PromiseOrValue<BigNumberish>,
      _localDecimals: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    creditChainPath(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _c: Pool.CreditObjStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    instantRedeemLocal(
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _amountLP: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintFeeOwner(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    protocolFeeOwner(overrides?: CallOverrides): Promise<[string]>;

    quoteLayerZeroFee(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _functionType: PromiseOrValue<BigNumberish>,
      _toAddress: PromiseOrValue<BytesLike>,
      _transferAndCallPayload: PromiseOrValue<BytesLike>,
      _lzTxParams: IStargateRouter.LzTxObjStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    redeemLocal(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _refundAddress: PromiseOrValue<string>,
      _amountLP: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BytesLike>,
      _lzTxParams: IStargateRouter.LzTxObjStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemLocalCallback(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _amountSD: PromiseOrValue<BigNumberish>,
      _mintAmountSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemLocalCheckOnRemote(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _amountSD: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemRemote(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _refundAddress: PromiseOrValue<string>,
      _amountLP: PromiseOrValue<BigNumberish>,
      _minAmountLD: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BytesLike>,
      _lzTxParams: IStargateRouter.LzTxObjStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    retryRevert(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revertLookup(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    revertRedeemLocal(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _refundAddress: PromiseOrValue<string>,
      _lzTxParams: IStargateRouter.LzTxObjStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendCredits(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBridgeAndFactory(
      _bridge: PromiseOrValue<string>,
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDeltaParam(
      _poolId: PromiseOrValue<BigNumberish>,
      _batched: PromiseOrValue<boolean>,
      _swapDeltaBP: PromiseOrValue<BigNumberish>,
      _lpDeltaBP: PromiseOrValue<BigNumberish>,
      _defaultSwapMode: PromiseOrValue<boolean>,
      _defaultLPMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeLibrary(
      _poolId: PromiseOrValue<BigNumberish>,
      _feeLibraryAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFees(
      _poolId: PromiseOrValue<BigNumberish>,
      _mintFeeBP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMintFeeOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProtocolFeeOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSwapStop(
      _poolId: PromiseOrValue<BigNumberish>,
      _swapStop: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWeightForChainPath(
      _poolId: PromiseOrValue<BigNumberish>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swap(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _refundAddress: PromiseOrValue<string>,
      _amountLD: PromiseOrValue<BigNumberish>,
      _minAmountLD: PromiseOrValue<BigNumberish>,
      _lzTxParams: IStargateRouter.LzTxObjStruct,
      _to: PromiseOrValue<BytesLike>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapRemote(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _dstGasForCall: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _s: Pool.SwapObjStruct,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawMintFee(
      _poolId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawProtocolFee(
      _poolId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  activateChainPath(
    _poolId: PromiseOrValue<BigNumberish>,
    _dstChainId: PromiseOrValue<BigNumberish>,
    _dstPoolId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addLiquidity(
    _poolId: PromiseOrValue<BigNumberish>,
    _amountLD: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bridge(overrides?: CallOverrides): Promise<string>;

  cachedSwapLookup(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BytesLike>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, string] & {
      token: string;
      amountLD: BigNumber;
      to: string;
      payload: string;
    }
  >;

  callDelta(
    _poolId: PromiseOrValue<BigNumberish>,
    _fullMode: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  clearCachedSwap(
    _srcChainId: PromiseOrValue<BigNumberish>,
    _srcAddress: PromiseOrValue<BytesLike>,
    _nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createChainPath(
    _poolId: PromiseOrValue<BigNumberish>,
    _dstChainId: PromiseOrValue<BigNumberish>,
    _dstPoolId: PromiseOrValue<BigNumberish>,
    _weight: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPool(
    _poolId: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    _sharedDecimals: PromiseOrValue<BigNumberish>,
    _localDecimals: PromiseOrValue<BigNumberish>,
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  creditChainPath(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _dstPoolId: PromiseOrValue<BigNumberish>,
    _srcPoolId: PromiseOrValue<BigNumberish>,
    _c: Pool.CreditObjStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  instantRedeemLocal(
    _srcPoolId: PromiseOrValue<BigNumberish>,
    _amountLP: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintFeeOwner(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  protocolFeeOwner(overrides?: CallOverrides): Promise<string>;

  quoteLayerZeroFee(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _functionType: PromiseOrValue<BigNumberish>,
    _toAddress: PromiseOrValue<BytesLike>,
    _transferAndCallPayload: PromiseOrValue<BytesLike>,
    _lzTxParams: IStargateRouter.LzTxObjStruct,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  redeemLocal(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _srcPoolId: PromiseOrValue<BigNumberish>,
    _dstPoolId: PromiseOrValue<BigNumberish>,
    _refundAddress: PromiseOrValue<string>,
    _amountLP: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<BytesLike>,
    _lzTxParams: IStargateRouter.LzTxObjStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemLocalCallback(
    _srcChainId: PromiseOrValue<BigNumberish>,
    _srcAddress: PromiseOrValue<BytesLike>,
    _nonce: PromiseOrValue<BigNumberish>,
    _srcPoolId: PromiseOrValue<BigNumberish>,
    _dstPoolId: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _amountSD: PromiseOrValue<BigNumberish>,
    _mintAmountSD: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemLocalCheckOnRemote(
    _srcChainId: PromiseOrValue<BigNumberish>,
    _srcAddress: PromiseOrValue<BytesLike>,
    _nonce: PromiseOrValue<BigNumberish>,
    _srcPoolId: PromiseOrValue<BigNumberish>,
    _dstPoolId: PromiseOrValue<BigNumberish>,
    _amountSD: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemRemote(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _srcPoolId: PromiseOrValue<BigNumberish>,
    _dstPoolId: PromiseOrValue<BigNumberish>,
    _refundAddress: PromiseOrValue<string>,
    _amountLP: PromiseOrValue<BigNumberish>,
    _minAmountLD: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<BytesLike>,
    _lzTxParams: IStargateRouter.LzTxObjStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  retryRevert(
    _srcChainId: PromiseOrValue<BigNumberish>,
    _srcAddress: PromiseOrValue<BytesLike>,
    _nonce: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revertLookup(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BytesLike>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  revertRedeemLocal(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _srcAddress: PromiseOrValue<BytesLike>,
    _nonce: PromiseOrValue<BigNumberish>,
    _refundAddress: PromiseOrValue<string>,
    _lzTxParams: IStargateRouter.LzTxObjStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendCredits(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _srcPoolId: PromiseOrValue<BigNumberish>,
    _dstPoolId: PromiseOrValue<BigNumberish>,
    _refundAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBridgeAndFactory(
    _bridge: PromiseOrValue<string>,
    _factory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDeltaParam(
    _poolId: PromiseOrValue<BigNumberish>,
    _batched: PromiseOrValue<boolean>,
    _swapDeltaBP: PromiseOrValue<BigNumberish>,
    _lpDeltaBP: PromiseOrValue<BigNumberish>,
    _defaultSwapMode: PromiseOrValue<boolean>,
    _defaultLPMode: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeLibrary(
    _poolId: PromiseOrValue<BigNumberish>,
    _feeLibraryAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFees(
    _poolId: PromiseOrValue<BigNumberish>,
    _mintFeeBP: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMintFeeOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProtocolFeeOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSwapStop(
    _poolId: PromiseOrValue<BigNumberish>,
    _swapStop: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWeightForChainPath(
    _poolId: PromiseOrValue<BigNumberish>,
    _dstChainId: PromiseOrValue<BigNumberish>,
    _dstPoolId: PromiseOrValue<BigNumberish>,
    _weight: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swap(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _srcPoolId: PromiseOrValue<BigNumberish>,
    _dstPoolId: PromiseOrValue<BigNumberish>,
    _refundAddress: PromiseOrValue<string>,
    _amountLD: PromiseOrValue<BigNumberish>,
    _minAmountLD: PromiseOrValue<BigNumberish>,
    _lzTxParams: IStargateRouter.LzTxObjStruct,
    _to: PromiseOrValue<BytesLike>,
    _payload: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapRemote(
    _srcChainId: PromiseOrValue<BigNumberish>,
    _srcAddress: PromiseOrValue<BytesLike>,
    _nonce: PromiseOrValue<BigNumberish>,
    _srcPoolId: PromiseOrValue<BigNumberish>,
    _dstPoolId: PromiseOrValue<BigNumberish>,
    _dstGasForCall: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _s: Pool.SwapObjStruct,
    _payload: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawMintFee(
    _poolId: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawProtocolFee(
    _poolId: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activateChainPath(
      _poolId: PromiseOrValue<BigNumberish>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addLiquidity(
      _poolId: PromiseOrValue<BigNumberish>,
      _amountLD: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    bridge(overrides?: CallOverrides): Promise<string>;

    cachedSwapLookup(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, string] & {
        token: string;
        amountLD: BigNumber;
        to: string;
        payload: string;
      }
    >;

    callDelta(
      _poolId: PromiseOrValue<BigNumberish>,
      _fullMode: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    clearCachedSwap(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createChainPath(
      _poolId: PromiseOrValue<BigNumberish>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createPool(
      _poolId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _sharedDecimals: PromiseOrValue<BigNumberish>,
      _localDecimals: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    creditChainPath(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _c: Pool.CreditObjStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    instantRedeemLocal(
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _amountLP: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintFeeOwner(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    protocolFeeOwner(overrides?: CallOverrides): Promise<string>;

    quoteLayerZeroFee(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _functionType: PromiseOrValue<BigNumberish>,
      _toAddress: PromiseOrValue<BytesLike>,
      _transferAndCallPayload: PromiseOrValue<BytesLike>,
      _lzTxParams: IStargateRouter.LzTxObjStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    redeemLocal(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _refundAddress: PromiseOrValue<string>,
      _amountLP: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BytesLike>,
      _lzTxParams: IStargateRouter.LzTxObjStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemLocalCallback(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _amountSD: PromiseOrValue<BigNumberish>,
      _mintAmountSD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemLocalCheckOnRemote(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _amountSD: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemRemote(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _refundAddress: PromiseOrValue<string>,
      _amountLP: PromiseOrValue<BigNumberish>,
      _minAmountLD: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BytesLike>,
      _lzTxParams: IStargateRouter.LzTxObjStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    retryRevert(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    revertLookup(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    revertRedeemLocal(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _refundAddress: PromiseOrValue<string>,
      _lzTxParams: IStargateRouter.LzTxObjStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    sendCredits(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _refundAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBridgeAndFactory(
      _bridge: PromiseOrValue<string>,
      _factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDeltaParam(
      _poolId: PromiseOrValue<BigNumberish>,
      _batched: PromiseOrValue<boolean>,
      _swapDeltaBP: PromiseOrValue<BigNumberish>,
      _lpDeltaBP: PromiseOrValue<BigNumberish>,
      _defaultSwapMode: PromiseOrValue<boolean>,
      _defaultLPMode: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeLibrary(
      _poolId: PromiseOrValue<BigNumberish>,
      _feeLibraryAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFees(
      _poolId: PromiseOrValue<BigNumberish>,
      _mintFeeBP: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintFeeOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFeeOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapStop(
      _poolId: PromiseOrValue<BigNumberish>,
      _swapStop: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWeightForChainPath(
      _poolId: PromiseOrValue<BigNumberish>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _refundAddress: PromiseOrValue<string>,
      _amountLD: PromiseOrValue<BigNumberish>,
      _minAmountLD: PromiseOrValue<BigNumberish>,
      _lzTxParams: IStargateRouter.LzTxObjStruct,
      _to: PromiseOrValue<BytesLike>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapRemote(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _dstGasForCall: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _s: Pool.SwapObjStruct,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawMintFee(
      _poolId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawProtocolFee(
      _poolId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CachedSwapSaved(uint16,bytes,uint256,address,uint256,address,bytes,bytes)"(
      chainId?: null,
      srcAddress?: null,
      nonce?: null,
      token?: null,
      amountLD?: null,
      to?: null,
      payload?: null,
      reason?: null
    ): CachedSwapSavedEventFilter;
    CachedSwapSaved(
      chainId?: null,
      srcAddress?: null,
      nonce?: null,
      token?: null,
      amountLD?: null,
      to?: null,
      payload?: null,
      reason?: null
    ): CachedSwapSavedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RedeemLocalCallback(uint16,bytes,uint256,uint256,uint256,address,uint256,uint256)"(
      srcChainId?: null,
      srcAddress?: PromiseOrValue<BytesLike> | null,
      nonce?: PromiseOrValue<BigNumberish> | null,
      srcPoolId?: null,
      dstPoolId?: null,
      to?: null,
      amountSD?: null,
      mintAmountSD?: null
    ): RedeemLocalCallbackEventFilter;
    RedeemLocalCallback(
      srcChainId?: null,
      srcAddress?: PromiseOrValue<BytesLike> | null,
      nonce?: PromiseOrValue<BigNumberish> | null,
      srcPoolId?: null,
      dstPoolId?: null,
      to?: null,
      amountSD?: null,
      mintAmountSD?: null
    ): RedeemLocalCallbackEventFilter;

    "Revert(uint8,uint16,bytes,uint256)"(
      bridgeFunctionType?: null,
      chainId?: null,
      srcAddress?: null,
      nonce?: null
    ): RevertEventFilter;
    Revert(
      bridgeFunctionType?: null,
      chainId?: null,
      srcAddress?: null,
      nonce?: null
    ): RevertEventFilter;

    "RevertRedeemLocal(uint16,uint256,uint256,bytes,uint256,uint256,uint256,bytes)"(
      srcChainId?: null,
      _srcPoolId?: null,
      _dstPoolId?: null,
      to?: null,
      redeemAmountSD?: null,
      mintAmountSD?: null,
      nonce?: PromiseOrValue<BigNumberish> | null,
      srcAddress?: PromiseOrValue<BytesLike> | null
    ): RevertRedeemLocalEventFilter;
    RevertRedeemLocal(
      srcChainId?: null,
      _srcPoolId?: null,
      _dstPoolId?: null,
      to?: null,
      redeemAmountSD?: null,
      mintAmountSD?: null,
      nonce?: PromiseOrValue<BigNumberish> | null,
      srcAddress?: PromiseOrValue<BytesLike> | null
    ): RevertRedeemLocalEventFilter;
  };

  estimateGas: {
    activateChainPath(
      _poolId: PromiseOrValue<BigNumberish>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addLiquidity(
      _poolId: PromiseOrValue<BigNumberish>,
      _amountLD: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bridge(overrides?: CallOverrides): Promise<BigNumber>;

    cachedSwapLookup(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    callDelta(
      _poolId: PromiseOrValue<BigNumberish>,
      _fullMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    clearCachedSwap(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createChainPath(
      _poolId: PromiseOrValue<BigNumberish>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPool(
      _poolId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _sharedDecimals: PromiseOrValue<BigNumberish>,
      _localDecimals: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    creditChainPath(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _c: Pool.CreditObjStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    instantRedeemLocal(
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _amountLP: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintFeeOwner(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeOwner(overrides?: CallOverrides): Promise<BigNumber>;

    quoteLayerZeroFee(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _functionType: PromiseOrValue<BigNumberish>,
      _toAddress: PromiseOrValue<BytesLike>,
      _transferAndCallPayload: PromiseOrValue<BytesLike>,
      _lzTxParams: IStargateRouter.LzTxObjStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemLocal(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _refundAddress: PromiseOrValue<string>,
      _amountLP: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BytesLike>,
      _lzTxParams: IStargateRouter.LzTxObjStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemLocalCallback(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _amountSD: PromiseOrValue<BigNumberish>,
      _mintAmountSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemLocalCheckOnRemote(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _amountSD: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemRemote(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _refundAddress: PromiseOrValue<string>,
      _amountLP: PromiseOrValue<BigNumberish>,
      _minAmountLD: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BytesLike>,
      _lzTxParams: IStargateRouter.LzTxObjStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    retryRevert(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revertLookup(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revertRedeemLocal(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _refundAddress: PromiseOrValue<string>,
      _lzTxParams: IStargateRouter.LzTxObjStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendCredits(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBridgeAndFactory(
      _bridge: PromiseOrValue<string>,
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDeltaParam(
      _poolId: PromiseOrValue<BigNumberish>,
      _batched: PromiseOrValue<boolean>,
      _swapDeltaBP: PromiseOrValue<BigNumberish>,
      _lpDeltaBP: PromiseOrValue<BigNumberish>,
      _defaultSwapMode: PromiseOrValue<boolean>,
      _defaultLPMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeLibrary(
      _poolId: PromiseOrValue<BigNumberish>,
      _feeLibraryAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFees(
      _poolId: PromiseOrValue<BigNumberish>,
      _mintFeeBP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMintFeeOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProtocolFeeOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSwapStop(
      _poolId: PromiseOrValue<BigNumberish>,
      _swapStop: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWeightForChainPath(
      _poolId: PromiseOrValue<BigNumberish>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swap(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _refundAddress: PromiseOrValue<string>,
      _amountLD: PromiseOrValue<BigNumberish>,
      _minAmountLD: PromiseOrValue<BigNumberish>,
      _lzTxParams: IStargateRouter.LzTxObjStruct,
      _to: PromiseOrValue<BytesLike>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapRemote(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _dstGasForCall: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _s: Pool.SwapObjStruct,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawMintFee(
      _poolId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawProtocolFee(
      _poolId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activateChainPath(
      _poolId: PromiseOrValue<BigNumberish>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      _poolId: PromiseOrValue<BigNumberish>,
      _amountLD: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cachedSwapLookup(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    callDelta(
      _poolId: PromiseOrValue<BigNumberish>,
      _fullMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    clearCachedSwap(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createChainPath(
      _poolId: PromiseOrValue<BigNumberish>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPool(
      _poolId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _sharedDecimals: PromiseOrValue<BigNumberish>,
      _localDecimals: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    creditChainPath(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _c: Pool.CreditObjStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    instantRedeemLocal(
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _amountLP: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintFeeOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeeOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteLayerZeroFee(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _functionType: PromiseOrValue<BigNumberish>,
      _toAddress: PromiseOrValue<BytesLike>,
      _transferAndCallPayload: PromiseOrValue<BytesLike>,
      _lzTxParams: IStargateRouter.LzTxObjStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemLocal(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _refundAddress: PromiseOrValue<string>,
      _amountLP: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BytesLike>,
      _lzTxParams: IStargateRouter.LzTxObjStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemLocalCallback(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _amountSD: PromiseOrValue<BigNumberish>,
      _mintAmountSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemLocalCheckOnRemote(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _amountSD: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemRemote(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _refundAddress: PromiseOrValue<string>,
      _amountLP: PromiseOrValue<BigNumberish>,
      _minAmountLD: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BytesLike>,
      _lzTxParams: IStargateRouter.LzTxObjStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    retryRevert(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revertLookup(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revertRedeemLocal(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _refundAddress: PromiseOrValue<string>,
      _lzTxParams: IStargateRouter.LzTxObjStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendCredits(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBridgeAndFactory(
      _bridge: PromiseOrValue<string>,
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDeltaParam(
      _poolId: PromiseOrValue<BigNumberish>,
      _batched: PromiseOrValue<boolean>,
      _swapDeltaBP: PromiseOrValue<BigNumberish>,
      _lpDeltaBP: PromiseOrValue<BigNumberish>,
      _defaultSwapMode: PromiseOrValue<boolean>,
      _defaultLPMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeLibrary(
      _poolId: PromiseOrValue<BigNumberish>,
      _feeLibraryAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFees(
      _poolId: PromiseOrValue<BigNumberish>,
      _mintFeeBP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMintFeeOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFeeOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSwapStop(
      _poolId: PromiseOrValue<BigNumberish>,
      _swapStop: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWeightForChainPath(
      _poolId: PromiseOrValue<BigNumberish>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _refundAddress: PromiseOrValue<string>,
      _amountLD: PromiseOrValue<BigNumberish>,
      _minAmountLD: PromiseOrValue<BigNumberish>,
      _lzTxParams: IStargateRouter.LzTxObjStruct,
      _to: PromiseOrValue<BytesLike>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapRemote(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _dstGasForCall: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _s: Pool.SwapObjStruct,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawMintFee(
      _poolId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawProtocolFee(
      _poolId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
